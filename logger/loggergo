package logger

import (
	"os"

	"github.com/speed-trade/go-utils/constants"
	"github.com/speed-trade/go-utils/model"
	"go.uber.org/zap"
	"go.uber.org/zap/zapcore"
)

var Logger *zap.Logger

type Level string

func (l Level) zapLogLevel() zapcore.Level {
	switch l {
	case constants.DebugLevel:
		return zapcore.DebugLevel
	case constants.InfoLevel:
		return zapcore.InfoLevel
	case constants.WarnLevel:
		return zapcore.WarnLevel
	case constants.ErrorLevel:
		return zapcore.ErrorLevel
	case constants.FatalLevel:
		return zapcore.FatalLevel
	case constants.PanicLevel:
		return zapcore.PanicLevel
	case constants.DPanicLevel:
		return zapcore.DPanicLevel
	default:
		return zapcore.DebugLevel
	}
}

func InitLogger(loggerConfig model.LoggerConfig) error {
	encoderConfig := zap.NewProductionEncoderConfig()
	encoderConfig.EncodeTime = zapcore.ISO8601TimeEncoder
	fileEncoder := zapcore.NewJSONEncoder(encoderConfig)
	consoleEncoder := zapcore.NewConsoleEncoder(encoderConfig)
	logFile, _ := os.OpenFile(loggerConfig.Filename, os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)
	writer := zapcore.AddSync(logFile)
	zapLevel := Level(loggerConfig.Level).zapLogLevel()
	var core zapcore.Core
	if loggerConfig.ConsoleLoggingEnabled {
		core = zapcore.NewTee(
			zapcore.NewCore(fileEncoder, writer, zapLevel),
			zapcore.NewCore(consoleEncoder, zapcore.AddSync(os.Stdout), zapLevel),
		)
	} else {
		core = zapcore.NewTee(
			zapcore.NewCore(fileEncoder, writer, zapLevel),
		)
	}

	Logger = zap.New(core, zap.AddCaller(), zap.AddStacktrace(zapcore.ErrorLevel))

	return nil
}
